
# Monitoring a Kubernetes-Hosted Application Using SSO with Gmail, Syslog, Azure Log Analytics, and Grafana

## Group Members

- Bo Yuan
- Shifeng Song
- Yingda Zhang
- Kenan Yusuf

**Presented To:** Islam Gomaa  
**Date:** 03/22/2024


## Introduction

In this project, we explored monitoring and managing system logs through Azure Grafana, deployed a React web application with Google Single Sign-On (SSO) for authentication, all within a Kubernetes environment. Our work involved setting up a syslog server and client, deploying the React SSO web page, and streamlining operations by transmitting syslogs directly from the cluster to Azure Log Monitor for enhanced efficiency and insight into cluster performance.

## Architecture

### Phase I

![architecture1](./imgs/Architecture1.png)
The initial architecture involves a Kubernetes cluster hosting a React web application with Google SSO authentication. It includes:

- **Web Application Node**: Hosts the React web application with Google SSO.
- **Syslog Client Node**: Captures logs from the web application and forwards them to the syslog server.
- **Syslog Server Node**: Aggregates and processes logs received from the syslog client.
- **Flask Component**: Forwards incoming messages to the syslog server on port 5000.

Logs generated by user activities in the web application are sent to the syslog client and then to the syslog server for aggregation and processing. Azure Monitoring analyzes the cluster's performance based on these logs.

### Deployments

#### Syslog Server and Client Pods

```bash
kubectl apply -f rsyslog-server-deployment.yaml
kubectl apply -f rsyslog-server-service.yaml
# Get all services in the cluster
# Create syslog client and replace the IP address to point to the syslog server container
kubectl apply -f .\rsyslog-client-deployment.yaml
# Test the setup
```

#### Deployment of Web-APP Google SSO Pod

Steps include setting up the client ID from Google, building and pushing the Docker file, applying the Kubernetes deployment and service, and port forwarding for development.

### Phase II
![architecture2](./imgs/Architecture2.png)
After identifying challenges with the initial setup, we moved to a more straightforward approach, directly transmitting all syslogs from the Kubernetes cluster to Azure Log Analytics. This involved:

- Direct transmission of login data to Azure log database using an npm module.
- Monitoring syslogs from the virtual machines in the Kubernetes cluster directly in Azure Monitoring.

This streamlined approach reduces complexity and enhances logging efficiency.

## Deployments

- **Google SSO Deployment**: Deployed with custom domain and DNS zone setup with Azure DNS Zones.
- **Grafana**: Installed and configured according to Grafana documentation, with data source setup in Grafana using credentials from an Azure app registration.

## Conclusion

Our project demonstrates the importance of a custom domain for hosting a Google SSO app on AKS and the seamless transmission of AKS cluster syslogs to Azure Log Analytics. The project required navigating through challenges such as the need for specific Azure roles and permissions. Ultimately, we successfully connected Grafana to Azure Log Analytics to monitor and analyze metrics data from our Kubernetes-hosted application.

## References

- [Syslog collection with container insights - Azure Monitor](https://learn.microsoft.com/en-us/azure/azure-monitor/containers/container-insights-syslog)
- [Configure rsyslog centralized log server on Ubuntu](https://computingpost.medium.com/configure-rsyslog-centralized-log-server-on-ubuntu-22-04-20-04-18-04-b5222129b3f3)
- [Install Grafana on Debian or Ubuntu](https://grafana.com/docs/grafana/latest/setup-grafana/installation/debian/)

More details can be found in the [project report](./ProjectReport.pdf).
